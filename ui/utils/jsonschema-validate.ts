import { ErrorSchema } from '@rjsf/core'
import { ValidationError } from 'jsonschema'

/**
 * returns a new errorSchema ONLY including validation errors for fields found in `errors`
 */
export function filterErrorsFromErrorSchema(
    errors: ValidationError[],
    errorSchema: ErrorSchema
) {
    // filter the RJSF error schema to ONLY contain the errors found in our jsonschema validation results
    return Object.keys(errorSchema)
        .filter(fieldName => getValidationErrorForFieldName(fieldName, errors))
        .reduce(
            (filteredErrorSchema: any, fieldName) => ({
                ...filteredErrorSchema,
                [fieldName]: errorSchema[fieldName],
            }),
            {}
        )
}

/**
 * given a list of errors generated by the `jsonschema` validate() call,
 * will return the error for a particular field
 */
function getValidationErrorForFieldName(
    fieldName: string,
    errors: ValidationError[]
) {
    return errors.find(error => error.argument === fieldName)
}

/**
 * copied from the core react-jsonschema-form library, as it isn't exported
 *
 * takes a RJSF errorSchema and converts it to an array of error messages to display to the user
 */
export function toErrorList(errorSchema: any, fieldName = 'root') {
    let errorList = []
    if ('__errors' in errorSchema) {
        errorList = errorList.concat(
            errorSchema.__errors.map(stack => {
                return {
                    stack: `${fieldName}: ${stack}`,
                }
            })
        )
    }
    return Object.keys(errorSchema).reduce((acc, key) => {
        if (key !== '__errors') {
            acc = acc.concat(toErrorList(errorSchema[key], key))
        }
        return acc
    }, errorList)
}
